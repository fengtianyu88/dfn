%% Linear Dependence of Parameter Sensitivity for DFN Model
%   Created Apr 30, 2014 by Scott Moura
%
%   This code analyzes linear dependence in the DFN model parameter
%   sensitivity equations. The goal is to find which subset of parameters
%   are uniquely identifiable (i.e. linearly dependent)
%
%   UNCERTAIN PARAMETERS, theta
%   1  : D_s_n
%   2  : D_s_p
%   3  : D_e_n
%   4  : D_e_s
%   5  : D_e_p
%   6  : (1-t_plus)
%   7  : 1/sig_n
%   8  : 1/sig_p
%   9  : 1/kappa
%   10 : (1 + d ln f_ca / d ln c_e)
%   11 : k_n
%   12 : k_p
%   13 : R_f_n
%   14 : R_f_p
%   15 : epsilon_e_n
%   16 : epsilon_e_s
%   17 : epsilon_e_p
%   18 : c_s_n_max
%   19 : c_s_p_max
%   20 : h
%   21 : 1/(rho_avg * C_p)
%
%   OUTPUTS OF INTEREST, y
%   1  : Volt
%   2  : SOC
%   3  : T

clc;
clear;
fs = 16;

% For output to command window
params = {'D_s^-','D_s^+','D_e^-','D_e^{sep}','D_e^+','1-t_c^0',...
    '1/sigma^-','1/sigma^+','1/kappa','1+(d ln f_c/a)(d ln c_e)','k^-','k^+',...
    'R_f^-','R_f^+','epsilon_e^-','epsilon_e^sep','epsilon_e^+',...
    'c_s_max^-','c_s_max^+','h','(rho_avg*C_p)^-1'};

% For plots, interpreted with latex
params1 = {'$D_s^{^{\_}}$','$D_s^+$','$D_e^-$','$D_e^{sep}$','$D_e^+$','$1{^{\_\ }}t_c^0$',...
    '$1/\sigma^{^{\_}}$','$1/\sigma^+$','$1/\kappa$','$(1+\frac{d \ln f_{c/a}}{d \ln c_e})$','$k^{^{\_}}$','$k^+$',...
    '$R_f^{^{\_}}$','$R_f^+$','$\epsilon_e^{^{\_}}$','$\epsilon_e^{sep}$','$\epsilon_e^+$',...
    '$c_{s,\max}^{^{\_}}$','$c_{s,\max}^{+}$','$h$','$(\rho_{avg}C_p)^{{^{\_}}1}$'};

%% Load Sensitivities
fn = 'data/sensitivity/sensitivity_new_c_s_constant_discharge.mat';
load(fn);
disp(['Loaded Sensitivity data file:  ' fn]); 

% Parse output sensitivity data (S3)
dfn_fn = out.fn;
S3 = out.S3;
clear out;

% Vector Sizes
Nt = 21;
NT = size(S3,3);

% Parse out sensitivity for each output
S_volt = squeeze(S3(1,:,:))';
S_soc = squeeze(S3(2,:,:))';
S_temp = squeeze(S3(3,:,:))';
clear S3;

%% Parameter Ranking by successive orthogonalization (Voltage)
% Use QR decomposition in economy mode
[Q,R,E] = qr(S_volt,0);

% Extract Diagonal
D = diag(diag(R));
% D(D < 0) = -D(D<0);
Rbar = D\R;
Rbar(end-1,:) = 0;
Rbar(end,:) = 0;
Rbar(end,end) = 1;
Rbar(end-1,end-1) = 1;

Dsq = (diag(D)).^2;

% Compute additional Variance
U = inv(Rbar)';
minvar = 1./Dsq .* diag(U*U')

%%% Output Orthogonalized Parameter Ranking

fprintf(1,'----------------------------------------\n');
fprintf(1,'ORTHOGONAL PARAMETER SENSITIVITY RANKING\n');
fprintf(1,'----------------------------------------\n');
for idx = 1:Nt
    fprintf(1,['Rank :%2.0f | Sq. Sens. Norm : %1.1e | Param : ' params{E(idx)} '\n'],idx,D(idx,idx)^2); 
end

%%% Plot Orthogonalized Parameter Ranking

% Voltage Sensitivity
figure(11); clf;
set(gcf,'Position',[234     3   564   695],'PaperPositionMode','auto');

barh(log10(Dsq(end:-1:1)));
xlim([-23 0.5])
ylim([0 Nt+1])
set(gca,'YTick',1:Nt);
set(gca,'Position',[0.2 0.1 0.75 0.85])
%set(gca, 'YTickLabel', params);
[hx,hy] = format_ticks(gca,' ',params1(E(end:-1:1)),-25:5:0,[],0,0,0.02,'FontSize',fs,'FontWeight','Bold');
set(gca,'FontSize',fs);
xlabel('Squared Orthogonal Sensitivity [log scale]','FontSize',fs)
title('\bf Orthogonalized Sensitivity of Voltage','FontSize',fs+2);

% Voltage Min Variance
figure(21); clf;
plot(1:Nt,log10(minvar),'bo-','LineWidth',2);
xlim([0.5 Nt+0.5])
set(gca,'XTick',1:Nt);
set(gca,'Position',[0.1 0.1 0.85 0.85])
[hx,hy] = format_ticks(gca,params1(E),' ',[],0:5:25,0,0,0.02,'FontSize',fs,'FontWeight','Bold');
set(gca,'FontSize',fs);
xlabel('Squared Orthogonal Sensitivity [log scale]','FontSize',fs)
title('\bf Orthogonalized Sensitivity of Voltage','FontSize',fs+2);

%% Parameter Ranking by successive orthogonalization (SOC)
% Use QR decomposition in economy mode
[Q,R,E] = qr(S_soc,0);

% Extract Diagonal
D = diag(diag(R));
% D(D < 0) = -D(D<0);
Rbar = D\R;

Dsq = (diag(D)).^2;

% Compute additional Variance

%%% Output Orthogonalized Parameter Ranking

fprintf(1,'----------------------------------------\n');
fprintf(1,'ORTHOGONAL PARAMETER SENSITIVITY RANKING\n');
fprintf(1,'----------------------------------------\n');
for idx = 1:Nt
    fprintf(1,['Rank :%2.0f | Sq. Sens. Norm : %1.1e | Param : ' params{E(idx)} '\n'],idx,D(idx,idx)^2); 
end

%%% Plot Orthogonalized Parameter Ranking

% SOC Sensitivity
figure(12); clf;
set(gcf,'Position',[234     3   564   695],'PaperPositionMode','auto');

barh(log10(Dsq(end:-1:1)));
xlim([-31.5 2.5])
ylim([0 Nt+1])
set(gca,'YTick',1:Nt);
set(gca,'Position',[0.2 0.1 0.75 0.85])
%set(gca, 'YTickLabel', params);
[hx,hy] = format_ticks(gca,' ',params1(E(end:-1:1)),-30:5:5,[],0,0,0.02,'FontSize',fs,'FontWeight','Bold');
set(gca,'FontSize',fs);
xlabel('Squared Orthogonal Sensitivity [log scale]','FontSize',fs)
title('\bf Orthogonalized Sensitivity of SOC','FontSize',fs+2);

%% Parameter Ranking by successive orthogonalization (Temp)
% Use QR decomposition in economy mode
[Q,R,E] = qr(S_temp,0);

% Extract Diagonal
D = diag(diag(R));
% D(D < 0) = -D(D<0);
Rbar = D\R;

Dsq = (diag(D)).^2;

%%% Output Orthogonalized Parameter Ranking

fprintf(1,'----------------------------------------\n');
fprintf(1,'ORTHOGONAL PARAMETER SENSITIVITY RANKING\n');
fprintf(1,'----------------------------------------\n');
for idx = 1:Nt
    fprintf(1,['Rank :%2.0f | Sq. Sens. Norm : %1.1e | Param : ' params{E(idx)} '\n'],idx,D(idx,idx)^2); 
end

%%% Plot Orthogonalized Parameter Ranking

% Temperature Sensitivity
figure(13); clf;
set(gcf,'Position',[234     3   564   695],'PaperPositionMode','auto');

barh(log10(Dsq(end:-1:1)));
xlim([-35 1])
ylim([0 Nt+1])
set(gca,'YTick',1:Nt);
set(gca,'Position',[0.2 0.1 0.75 0.85])
%set(gca, 'YTickLabel', params);
[hx,hy] = format_ticks(gca,' ',params1(E(end:-1:1)),-35:5:0,[],0,0,0.02,'FontSize',fs,'FontWeight','Bold');
set(gca,'FontSize',fs);
xlabel('Squared Orthogonal Sensitivity [log scale]','FontSize',fs)
title('\bf Orthogonalized Sensitivity of Temp.','FontSize',fs+2);

%%%%%%%%%%%%%%%%%
% Turns out the analysis below is not necessary
%%%%%%%%%%%%%%%%%


% %% Plot R-bar "Linear Dependence" Matrix
% cutoff = 0.1;
% 
% figure(14); clf;
% set(gcf,'Position',[330    39   710   659]);
% for ii = 1:Nt
%     for jj = (ii+1):Nt
%         
%         % If NaN, then don't include
%         if(isnan(Rbar(ii,jj)))
%             col = [0 0 0];
%         
%         % (LINEARLY DEPENDENT) If dot product of sensitivity is sufficiently close to one, then
%         % only plot the border and make interior white
%         elseif(abs(Rbar(ii,jj)) > cutoff)
%             col = [abs(Rbar(ii,jj)), 0, 0];
%             plot(ii,jj,'s','MarkerSize',24,'MarkerEdgeColor',col,'LineWidth',2);
%         % (LINEARLY INDEPENDENT) If dot product of sensitivity is sufficiently close to one, then
%         % only plot the border and make interior white
%         else
%             col = [abs(Rbar(ii,jj)), 0, 0];
%             plot(ii,jj,'s','MarkerSize',24,'MarkerEdgeColor',col,...
%             'MarkerFaceColor',col);
%         end
%         hold on;
%         
%     end
% end
% 
% % colorbar;
% 
% xlim([0 22])
% ylim([0 22])
% 
% set(gca,'FontSize',fs);
% set(gca,'XTick',get(gca,'YTick'));
% grid on;
% xlabel('$$\textrm{Param} \ \ \ \theta_i \ \ \textrm{index}$$','FontSize',fs+2,'interpreter','latex')
% ylabel('$$\textrm{Param} \ \ \ \theta_j \ \ \textrm{index}$$','FontSize',fs+2,'interpreter','latex')
% tit = ['$$<S_i,S_j>/ \|S_i\| \|S_j\| \qquad', sprintf(' \\textrm{Cutoff = %1.1f}$$',cutoff)];
% title(tit,'interpreter','latex');